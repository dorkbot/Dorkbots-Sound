/** Author: Dayvid jones* http://www.dayvid.com* Copyright (c) Disco Blimp 2012* http://www.discoblimp.com* Version: 1.0.3* * Licence Agreement** You may distribute and modify this class freely, provided that you leave this header intact,* and add appropriate headers to indicate your changes. Credit is appreciated in applications* that use this code, but is not required.* * Permission is hereby granted, free of charge, to any person obtaining a copy* of this software and associated documentation files (the "Software"), to deal* in the Software without restriction, including without limitation the rights* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell* copies of the Software, and to permit persons to whom the Software is* furnished to do so, subject to the following conditions:* * The above copyright notice and this permission notice shall be included in* all copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN* THE SOFTWARE.*/package dorkbots.dorkbots_sound{	import dorkbots.dorkbots_sound.music.MusicPlayer;	import dorkbots.dorkbots_sound.music.SoundMusicModel;	import dorkbots.dorkbots_sound.sound.SoundModel;	import dorkbots.dorkbots_sound.sound.SoundObjectPlayer;
	/**	 * This is a singleton. It sets up and manages all the sound groups, or tracks.	 * The groups are: Music, Voice-overs and Sound FX.	 * 	 */	public class SoundManager	{		private static var initialized:Boolean = false;		private static var stageWidth:Number = 0;		private static var stageHeight:Number = 0;		private static var embedSound:Object;		private static var _musicPlayer:MusicPlayer;		private static var _soundFXPlayer:SoundObjectPlayer;		private static var _voiceOverPlayer:SoundObjectPlayer;		private static var _musicModel:SoundModel;		private static var _soundFXModel:SoundModel;		private static var _voiceOverModel:SoundModel;				public function SoundManager(pvt:PrivateClass)		{		}				/**		 * This is the model for the Voice Overs. Access it to change Voice-over properties such as volume control.		 * 		 * @return SoundModel Returns the Voice-over group's model.		 */		public static function get voiceOverModel():SoundModel
		{			if (_voiceOverModel == null)			{				initVoiceOver()			}
			return _voiceOverModel;
		}				/**		 * This is the player and creator for the Voice-overs. Access it to create and control voice-overs.		 * 		 * @return SoundObjectPlayer Returns the Voice-over player.		 */		public static function get voiceOverPlayer():SoundObjectPlayer
		{			if (_voiceOverModel == null)			{				initVoiceOver()			}
			return _voiceOverPlayer;
		}				/**		 * This is the player and creator for the Music. Access it to control music.		 * 		 * @return MusicPlayer Returns the Music player.		 */		public static function get musicPlayer():MusicPlayer
		{			if (_musicModel == null)			{				initMusic();			}
			return _musicPlayer;
		}				/**		 * This is the model for the Music. Access it to change Music properties such as volume control.		 * 		 * @return SoundModel Returns the Music group's model.		 */		public static function get musicModel():SoundModel		{			if (_musicModel == null)			{				initMusic();			}						return _musicModel;		}				/**		 * This is the model for the Sound FX group. Access it to change sound fx properties such as volume control.		 * 		 * @return SoundModel Returns the Sound FX group's model.		 */		public static function get soundFXModel():SoundModel		{			if (_soundFXModel == null)			{				initSoundFX();			}			return _soundFXModel;		}				/**		 * This is the player and creator for the Sound FXs. Access it to control and create sound fxs.		 * 		 * @return SoundObjectPlayer Returns the Sound FXs player.		 */		public static function get soundFXPlayer():SoundObjectPlayer		{			if (_soundFXModel == null)			{				initSoundFX();			}			return _soundFXPlayer;		}				/**		 * This is the initialization method for this singleton class. This method must be called before using any of the sound systems features.		 * 		 * @param aStageWidth The width of the stage. Used for stereo panning and distance fading.		 * @param aStageHeight The height of the stage. Used for stereo panning and distance fading.		 * @param aEmbedSound The Object used for getting Sound Classes.		 */		public static function init(aEmbedSound:Object, aStageWidth:Number = 0, aStageHeight:Number = 0):void		{			embedSound = aEmbedSound;			stageWidth = aStageWidth;			stageHeight = aStageHeight;						initialized = true;		}				private static function initMusic():void		{			// music			if (initialized)			{				_musicModel = new SoundMusicModel( stageWidth, stageHeight, embedSound );				_musicPlayer = new MusicPlayer( _musicModel, playerDisposedCallBack );			}			else			{				throw new Error("[SoundManager] YOU MUST CALL THE init METHOD BEFORE USING THIS CLASS!!!");			}		}				private static function initSoundFX():void		{			// sound fx			if (initialized)			{				_soundFXModel = new SoundModel( stageWidth, stageHeight, embedSound );				_soundFXPlayer = new SoundObjectPlayer( _soundFXModel, playerDisposedCallBack );			}			else			{				throw new Error("[SoundManager] YOU MUST CALL THE init METHOD BEFORE USING THIS CLASS!!!");			}		}				private static function initVoiceOver():void		{			// Voice Overs			if (initialized)			{				_voiceOverModel = new SoundModel( stageWidth, stageHeight, embedSound );				_voiceOverPlayer = new SoundObjectPlayer( _voiceOverModel, playerDisposedCallBack );			}			else			{				throw new Error("[SoundManager] YOU MUST CALL THE init METHOD BEFORE USING THIS CLASS!!!");			}		}				private static function playerDisposedCallBack(caller:Object):void		{			if (initialized)			{				switch(caller)				{					case _musicPlayer:						_musicModel.dispose();						_musicModel = null;						_musicPlayer = null;						break;					case _soundFXPlayer:						_soundFXModel.dispose();						_soundFXModel = null;						_soundFXPlayer = null;						break;					case _voiceOverPlayer:						_voiceOverModel.dispose();						_voiceOverModel = null;						_voiceOverPlayer = null;						break;				}			}		}				/**		 * Performs a clean up, making everything in this class eligible for garbage collection. You will have to reinitialize this SoundManger before using any part of it again.		 * 		 */		public static function dispose():void		{			initialized = false;						if (_musicModel != null)			{				_musicPlayer.dispose();				_musicPlayer = null;								_musicModel.dispose();				_musicModel = null;			}						if (_soundFXModel != null)			{				_soundFXPlayer.dispose();				_soundFXPlayer = null;								_soundFXModel.dispose();				_soundFXModel = null;			}						if (_voiceOverModel != null)			{				_voiceOverPlayer.dispose();				_voiceOverPlayer = null;								_voiceOverModel.dispose();				_voiceOverModel = null;			}						embedSound = null;		}	}}// this Private Class is only used to "jam" the param in the singleton constructor.  So only this singleton can instiate itselfclass PrivateClass{	public function PrivateClass()	{	}}