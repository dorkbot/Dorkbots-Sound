package dorkbots_sound_example.app.view{	import dorkbots_sound_example.app.notifications.Notifications;	import dorkbots_sound_example.app.view.mediators.SoundExampleMediator;	import dorkbots_sound_example.app.view.views.SoundExampleView;	import dorkbots_sound_example.app.view.views.StartView;		import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.Sprite;	import flash.display.StageDisplayState;	import flash.display.StageScaleMode;	import flash.events.MouseEvent;		import org.puremvc.as3.interfaces.IMediator;	import org.puremvc.as3.interfaces.INotification;	import org.puremvc.as3.patterns.mediator.Mediator;
		public class ApplicationMediator extends Mediator implements IMediator	{		public static const NAME:String = "ApplicationMediator";				private var main_mc:Sprite;		private var view_mc:DisplayObject;				public function ApplicationMediator(viewComponent:DisplayObjectContainer):void		{			//trace("[" + NAME + "]");						super( NAME, viewComponent );						//setUpFullscreen();		}				private function setUpFullscreen():void		{			main_mc = Sprite( viewComponent );			main_mc.addEventListener(MouseEvent.CLICK, mainMCClicked);		}				private function mainMCClicked(event:MouseEvent):void		{			main_mc.removeEventListener(MouseEvent.CLICK, mainMCClicked);			main_mc.stage.scaleMode = StageScaleMode.NO_SCALE;			main_mc.stage.displayState = StageDisplayState.FULL_SCREEN;					}				override public function listNotificationInterests():Array		{			return [				Notifications.APP_READY,				Notifications.START_SOUND_EXAMPLE,				Notifications.CLOSE_SOUND_EXAMPLE			];		}				override public function handleNotification( notification:INotification ):void		{				var name:String = notification.getName();			var body:Object = notification.getBody();						switch ( name )			{				case Notifications.APP_READY:					view_mc = new StartView();					viewComponent.addChild(view_mc);					facade.registerMediator( new SoundExampleMediator( view_mc, Notifications.START_SOUND_EXAMPLE ) );										break;								case Notifications.START_SOUND_EXAMPLE:					sendNotification( Notifications.INIT_SOUND );					viewComponent.removeChild(view_mc);					view_mc = new SoundExampleView();					viewComponent.addChild(view_mc);					facade.removeMediator(SoundExampleMediator.NAME);					facade.registerMediator( new SoundExampleMediator( view_mc, Notifications.CLOSE_SOUND_EXAMPLE ) );										break;								case Notifications.CLOSE_SOUND_EXAMPLE:					sendNotification( Notifications.DISPOSE_SOUND );					viewComponent.removeChild(view_mc);					view_mc = new StartView();					viewComponent.addChild(view_mc);					facade.removeMediator(SoundExampleMediator.NAME);					facade.registerMediator( new SoundExampleMediator( view_mc, Notifications.START_SOUND_EXAMPLE ) );										break;			}		}	}}