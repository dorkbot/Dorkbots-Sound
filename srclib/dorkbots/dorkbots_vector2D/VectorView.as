/** Author: Dayvid jones* http://www.dayvid.com* Copyright (c) Disco Blimp 2013* http://www.discoblimp.com* Version: 1.0.3* * Licence Agreement** You may distribute and modify this class freely, provided that you leave this header intact,* and add appropriate headers to indicate your changes. Credit is appreciated in applications* that use this code, but is not required.* * Permission is hereby granted, free of charge, to any person obtaining a copy* of this software and associated documentation files (the "Software"), to deal* in the Software without restriction, including without limitation the rights* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell* copies of the Software, and to permit persons to whom the Software is* furnished to do so, subject to the following conditions:* * The above copyright notice and this permission notice shall be included in* all copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN* THE SOFTWARE.*/package dorkbots.dorkbots_vector2D{	import flash.display.Sprite;	public class VectorView	{		public function VectorView()		{		}		public static function drawMovingVector(a_mc:Sprite = null, radius:Number = 5, lineColor:uint = 0x000000):Sprite		{			if (a_mc == null) a_mc = new Sprite();			a_mc.graphics.clear();			a_mc.graphics.lineStyle(1, lineColor);			// front point			a_mc.graphics.moveTo(radius, 0);			// right side			a_mc.graphics.lineTo(-radius, radius / 1.5);			// rear			a_mc.graphics.lineTo(-radius, -radius / 1.5);			// left side			a_mc.graphics.lineTo(radius, 0);			return a_mc;		}		//		public static function drawEuclideanVector(aVelocityVector:EuclideanVector2D, a_mc:Sprite = null, lineColor:uint = 0x000000):Sprite		{			if (a_mc == null) a_mc = new Sprite();			a_mc.graphics.clear();			a_mc.graphics.lineStyle(1, lineColor);			a_mc.graphics.moveTo(0, 0);			a_mc.graphics.lineTo(aVelocityVector.velocity.x, aVelocityVector.velocity.y);			a_mc.x = aVelocityVector.position.x;			a_mc.y = aVelocityVector.position.y;			return a_mc;		}		//		public static function drawObject(aArray:Vector.<EuclideanVector2D>, a_mc:Sprite = null, lineColor:uint = 0x000000):Sprite		{			if (a_mc == null) a_mc = new Sprite();			for (var i:uint = 0; i < aArray.length; i++)			{				if (i == 0) 				{					a_mc.addChild(drawEuclideanVector(aArray[i], null, 0xff0000));				}				else if (i == 1)				{					a_mc.addChild(drawEuclideanVector(aArray[i], null, 0xffff00));				}				else				{					a_mc.addChild(drawEuclideanVector(aArray[i], null, lineColor));				}			}			return a_mc;		}		//		public static function drawVector2D(aVector:Vector2D, a_mc:Sprite = null, lineColor:uint = 0x000000):Sprite		{			if (a_mc == null) a_mc = new Sprite();			a_mc.graphics.lineStyle(0, lineColor);			a_mc.graphics.moveTo(0, 0);			a_mc.graphics.lineTo(aVector.x, aVector.y);			return a_mc;		}		//		public static function drawCircle(aV:Vector2D, radius:Number, color:uint = 0x000000, fill:Boolean = false):CircleSprite		{			var circle:CircleSprite = new CircleSprite(radius);			circle.moveToVector(aV);			circle.drawCircle(color, 0, fill);			return circle;		}	}}