/** Author: Dayvid jones* http://www.dayvid.com* Copyright (c) Disco Blimp 2012* http://www.discoblimp.com* Version: 1.0.3* * Licence Agreement** You may distribute and modify this class freely, provided that you leave this header intact,* and add appropriate headers to indicate your changes. Credit is appreciated in applications* that use this code, but is not required.* * Permission is hereby granted, free of charge, to any person obtaining a copy* of this software and associated documentation files (the "Software"), to deal* in the Software without restriction, including without limitation the rights* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell* copies of the Software, and to permit persons to whom the Software is* furnished to do so, subject to the following conditions:* * The above copyright notice and this permission notice shall be included in* all copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN* THE SOFTWARE.*/package dorkbots.dorkbots_sound.music {	import dorkbots.dorkbots_broadcasters.IBroadcastedEvent;	import dorkbots.dorkbots_sound.SoundEvents;	import dorkbots.dorkbots_sound.sound.SoundModel;
	/**	 * MusicPlayer is used for playing music, only one music sound object can play at one time.	 * <ol>	 *		<li> param aModel SoundModel used for states and properties.</li>	 * </ol>	 */		public class MusicPlayer	{		private var disposedCallBack:Function;		private var model:SoundModel;		private var currentMusicObject:MusicObject = null;		private var currentMusic:String;		private var musicPlaying:Boolean = false;		private var musicCreator:MusicCreator;				public function MusicPlayer(aModel:SoundModel, aDisposedCallBack:Function)		{			model = aModel;			disposedCallBack = aDisposedCallBack;			musicCreator = new MusicCreator(aModel);			currentMusic = "";						model.addEventListener(SoundEvents.MUTE_UPDATED, muteUpdated);			model.addEventListener(SoundEvents.VOLUME_UPDATED, volumeUpdated);		}				private function volumeUpdated(event:IBroadcastedEvent):void
		{
			setSoundTransform(model.volume);
		}				private function muteUpdated(event:IBroadcastedEvent):void
		{
			if (model.mute) 			{				muteMusic();			} 			else 			{				unMuteMusic();			}
		}				/**		 * Plays the selected music.		 * 		 * @param aType A string that is the name of the music class to play.		 */		public function playMusic(aType:String):void 		{			musicPlaying = true;						//trace("playMusic");					var deleteCurrentMusic:Boolean = false;						if (musicCreator.playDelete && !currentMusicObject.playing)			{				deleteCurrentMusic = true;			}			else if (aType != currentMusic) 			{				deleteCurrentMusic = true;			}						if (deleteCurrentMusic)			{				stopMusic();				deleteMusic();				currentMusic = aType;				currentMusicObject = musicCreator.createMusic(aType);			}						playTheMusic();					}				private function playTheMusic():void 		{			musicPlaying = true;						if (!model.mute) 			{				if (currentMusicObject != null) currentMusicObject.playMusic();			}		}				/**		 * Stops the current music.		 * 		 */		public function stopMusic():void 		{			musicPlaying = false;						muteMusic();		}				private function unMuteMusic():void 		{			if (musicPlaying) playTheMusic();		}		private function muteMusic():void		{			if (currentMusicObject != null) currentMusicObject.stopMusic();		}				private function setSoundTransform(aVol:Number = 1, aPan:Number = 0, aX:* = null):void 		{			if (currentMusicObject != null) currentMusicObject.setSoundTransform(aVol, aPan, aX);		}				/**		 * Stops and deletes the current music making it eligible for garbage collection.		 * 		 */		public function deleteMusic():void		{			if (currentMusicObject != null) currentMusicObject.dispose();			currentMusic = "";			currentMusicObject = null;		}				/**		 * Performs a clean up for garbage collection.		 * 		 */		public function dispose():void		{			if (model != null)			{				model.removeEventListener(SoundEvents.MUTE_UPDATED, muteUpdated);				model.removeEventListener(SoundEvents.VOLUME_UPDATED, volumeUpdated);				model = null;				deleteMusic();				musicCreator.dispose();				musicCreator = null;								disposedCallBack.call(null, this);				disposedCallBack = null;			}		}	}}