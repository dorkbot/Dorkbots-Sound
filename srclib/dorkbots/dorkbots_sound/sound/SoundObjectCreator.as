/** Author: Dayvid jones* http://www.dayvid.com* Copyright (c) Disco Blimp 2012* http://www.discoblimp.com* Version: 1.0.3* * Licence Agreement** You may distribute and modify this class freely, provided that you leave this header intact,* and add appropriate headers to indicate your changes. Credit is appreciated in applications* that use this code, but is not required.* * Permission is hereby granted, free of charge, to any person obtaining a copy* of this software and associated documentation files (the "Software"), to deal* in the Software without restriction, including without limitation the rights* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell* copies of the Software, and to permit persons to whom the Software is* furnished to do so, subject to the following conditions:* * The above copyright notice and this permission notice shall be included in* all copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN* THE SOFTWARE.*/package dorkbots.dorkbots_sound.sound{	// ABSTRACT CLASS (should be subclassed and not instantiated)	// Encapsulates SFX creation	public class SoundObjectCreator	{		private var model:SoundModel;		private var soundObjects:Vector.<SoundObject> = new Vector.<SoundObject>();				public function SoundObjectCreator(aModel:SoundModel) 		{			model = aModel;		}				public final function createSound(aType:String):SoundObject 		{			var thisSfx:SoundObject = new SoundObject(model, createASound(aType), this);			soundObjects.push(thisSfx);			return thisSfx;		}				public final function removeSound(soundObject:SoundObject):void		{			soundObjects.splice(soundObjects.indexOf(soundObject), 1);		}				public final function changeVolume(aNum:Number):void 		{			var soundObjectsLength:uint = soundObjects.length;			if (soundObjectsLength)			{				var i:uint = 0;				for (i; i < soundObjectsLength; i++) 				{					soundObjects[i].changeVolume(aNum);				}			}		}				public final function stopAllSound():void		{			var soundObjectsLength:uint = soundObjects.length;			if (soundObjectsLength)			{				var i:uint = 0;				for (i; i < soundObjectsLength; i++) 				{					soundObjects[i].stopSound();				}			}		}				protected function createASound(aType:String):Class 		{			return model.embedSound[aType];		}				public final function dispose():void		{			model = null;			for (var i:int = 0; i < soundObjects.length; i++) 
			{
				soundObjects[i].dispose();
			}
			soundObjects.length = 0;		}	}}