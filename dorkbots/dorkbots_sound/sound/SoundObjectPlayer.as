/** Author: Dayvid jones* http://www.dayvid.com* Copyright (c) Disco Blimp 2012* http://www.discoblimp.com* Version: 1.0.3* * Licence Agreement** You may distribute and modify this class freely, provided that you leave this header intact,* and add appropriate headers to indicate your changes. Credit is appreciated in applications* that use this code, but is not required.* * Permission is hereby granted, free of charge, to any person obtaining a copy* of this software and associated documentation files (the "Software"), to deal* in the Software without restriction, including without limitation the rights* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell* copies of the Software, and to permit persons to whom the Software is* furnished to do so, subject to the following conditions:* * The above copyright notice and this permission notice shall be included in* all copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN* THE SOFTWARE.*/package dorkbots.dorkbots_sound.sound{	import dorkbots.dorkbots_broadcasters.IBroadcastedEvent;
	import dorkbots.dorkbots_sound.SoundEvents;
		/**	 * SoundObjectPlayer is used for creating SoundObjects. You can also use it to create, store and play SoundObjects. But usually you will want to get a SoundObject instance and control it.	 * <ol>	 *		<li> param aModel SoundModel used for states and properties.</li>	 * </ol>	 */		public class SoundObjectPlayer	{		private var disposedCallBack:Function;		private var model:SoundModel;		private var soundCreator:SoundObjectCreator;		private var soundObjects:Array = new Array();				public function SoundObjectPlayer(aModel:SoundModel, aDisposedCallBack:Function)		{			disposedCallBack = aDisposedCallBack;			model = aModel;			soundCreator = new SoundObjectCreator(aModel);			SoundEvents			model.addEventListener(SoundEvents.MUTE_UPDATED, muteUpdated);			model.addEventListener(SoundEvents.VOLUME_UPDATED, volumeUpdated);		}				private function volumeUpdated(event:IBroadcastedEvent):void
		{
			changeVolume(model.volume);
		}				private function muteUpdated(event:IBroadcastedEvent):void
		{
			changeVolume(model.volume);
		}				/**		 * Use this method to get a SoundObject instances.		 * 		 * @param aType A string that is the name of the sound class that the SoundObject will create and control.		 */		public function createSound(aType:String):SoundObject 		{			return soundCreator.createSound(aType);		}				/**		 * You can use this method to control a SoundObject when you don't want to store an instance. But it's recommend that you use createSound and control the SoundObject directly.		 * 		 * @param aType A string that is the name of the sound class that the SoundObject will create and control.		 * @param aObject An optional object for all params. You can use a SoundObjectVars.		 */		public function playSound(aType:String, aObject:Object = null):void 		{			if (!model.mute) 			{				if (aObject != null && aObject.diposeWhenCompleted != null && aObject.diposeWhenCompleted == true)				{					var sound:SoundObject = soundCreator.createSound(aType);					sound.playSound(aObject);				}				else				{					if (soundObjects[aType] == undefined) 					{						soundObjects[aType] = soundCreator.createSound(aType);					}					soundObjects[aType].playSound(aObject);				}			}		}				/**		 * You can use this method to stop a SoundObject when you don't want to store an instance. But it's recommend that you use createSound and control the SoundObject directly.		 * 		 * @param aType A string that is the name of the sound class that the SoundObject will create and control.		 */		public function stopSound(aType:String):void 		{			if (soundObjects[aType] != null) soundObjects[aType].stopSFX();		}				/**		 * Stops all sounds associated with this SoundObjectPlayer. It doesn't stop sounds that where created using the createSound method.		 * 		 */		public function stopAllSound():void 		{			soundCreator.stopAllSound();		}				private function changeVolume(aNum:Number):void 		{			soundCreator.changeVolume(aNum);		}				/**		 * Disposes of all the SoundObject instances that are controlled by this class. It doesn't dispose of SoundObject instances that are not controlled by this Class. It doesn't dispose of sounds that where created using the createSound method.		 * 		 */		public function disposeSounds():void		{			for (var i:uint = 0; i < soundObjects.length; i++) if (soundObjects[i] != undefined && soundObjects[i] != null) soundObjects[i].cleanUp();						soundObjects.length = 0;		}				/**		 * Performs a cleans up for garbage collection.		 * 		 */		public function dispose():void		{			if (model != null)			{				model.removeEventListener(SoundEvents.MUTE_UPDATED, muteUpdated);				model.removeEventListener(SoundEvents.VOLUME_UPDATED, volumeUpdated);				model = null;				soundCreator.dispose();				soundCreator = null;				disposeSounds();								disposedCallBack.call(null, this);			}		}	}}