/** Author: Dayvid jones* http://www.dayvid.com* Copyright (c) Disco Blimp 2012* http://www.discoblimp.com* Version: 1.0.3* * Licence Agreement** You may distribute and modify this class freely, provided that you leave this header intact,* and add appropriate headers to indicate your changes. Credit is appreciated in applications* that use this code, but is not required.* * Permission is hereby granted, free of charge, to any person obtaining a copy* of this software and associated documentation files (the "Software"), to deal* in the Software without restriction, including without limitation the rights* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell* copies of the Software, and to permit persons to whom the Software is* furnished to do so, subject to the following conditions:* * The above copyright notice and this permission notice shall be included in* all copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN* THE SOFTWARE.*/package dorkbots.dorkbots_sound.sound{	import dorkbots.dorkbots_broadcasters.BroadcastingObject;	import dorkbots.dorkbots_sound.SoundEvents;
	/**	 * The SoundModel is used for storing states and properties for all the SoundObjects associated with the Sound Creator and Sound Player.	 * <ol> 	 *		<li> param aStageWidth The width of the stage. Used for stereo panning and distance fading.</li> 	 *		<li> param aStageHeight The height of the stage. Used for stereo panning and distance fading.</li> 	 * 		<li> param aEmbedSound The Object used for getting Sound Classes.</li> 	 *  </ol>	 */		public class SoundModel extends BroadcastingObject	{		private var _embedSound:Object;				// set this if you want the pan width to be more or less than the width of the stage		private var _panWidth:Number;		// the point at which distance fade starts		private var _distanceToStartSoundFade:Number = 0;				private var _stageWidth:Number;		private var _stageHeight:Number;				protected var _volume:Number = 1;		private var _volumeMax:Number = _volume;		protected var _volumeDefault:Number = _volumeMax;		protected var _mute:Boolean = false;		protected var savedVolume:Number = _volume;				/**		 * The SoundModel is used for storing states and properties for all the SoundObjects associated with the Sound Creator and Sound Player.		 * 		 * @param aStageWidth The width of the stage. Used for stereo panning and distance fading.		 * @param aStageHeight The height of the stage. Used for stereo panning and distance fading.		 * @param aEmbedSound The Object used for getting Sound Classes.		 */		public function SoundModel(aStageWidth:Number, aStageHeight:Number, aEmbedSound:Object)		{			_stageWidth = aStageWidth;			_stageHeight = aStageHeight;			_embedSound = aEmbedSound;						_panWidth = _stageWidth;		}				/**		 * The volume maximum level. The default is 1.		 * 		 */		public function get volumeMax():Number
		{
			return _volumeMax;
		}				public function set volumeMax(value:Number):void
		{
			_volumeMax = value;			Math.min(_volume, _volumeMax);
		}		/**		 * The Object used for getting Sound Classes. This is only used by Factory Classes.		 * 		 */		public function get embedSound():Object		{			return _embedSound;		}				/**		 * The width of the stage. Used by the SoundObjects for stereo panning and distance fading.		 * 		 */		public function get stageWidth():Number		{			return 	_stageWidth;		}				/**		 * The Height of the stage. Used by the SoundObjects for stereo panning and distance fading. 		 * 		 */		public function get stageHeight():Number		{			return _stageHeight;		}				/**		 * Set this if you want the pan width to be more or less than the width of the stage. It's set to the stage's width by default.		 * 		 */		public function get panWidth():Number		{			return _panWidth;		}		public function set panWidth(value:Number):void		{			_panWidth = value;		}				/**		 * This is usually used for games. You can set a distance from the center of the screen for when a sound's volume will fade. This gives the affect of the sound getting farther away. Good for making objects sound like they are traveling away or towards. Use with the "position" property. And make sure you are passing the stage's height and weight to SoundManager.init(aEmbedSound:Object, aStageWidth:Number = 0, aStageHeight:Number = 0)		 * 		 */		public function get distanceToStartSoundFade():Number		{			return _distanceToStartSoundFade;		}		public function set distanceToStartSoundFade(value:Number):void		{			_distanceToStartSoundFade = value;		}				/**		 * Set's the volume of all SoundObjects.		 * 		 */		public function get volume():Number 		{			return _volume;		}		public function set volume(aParam:Number):void 		{			if (aParam > _volumeMax) 			{				_volume = _volumeMax;			} 			else 			{				_volume = aParam;			}			if (_volume > 0 && _mute) 			{				_mute = false;				broadcastEvent( SoundEvents.MUTE_UPDATED );			}			else if (_volume <= 0 && !_mute) 			{				_mute = true;				broadcastEvent( SoundEvents.MUTE_UPDATED );			}			else			{				broadcastEvent( SoundEvents.VOLUME_UPDATED );			}					}				/**		 * Toggle's the muting of all SoundObjects.		 * 		 */		public function toggleMute():void 		{			if (_mute) mute = false else mute = true;		}				/**		 * Controls muting - mute set to "true" will mute all SoundObjects, mute set to "false" will unmute all SoundObjects.		 * 		 */		public function set mute(aParam:Boolean):void		{			if (_mute != aParam)			{				if (!aParam)				{					if (savedVolume <= .1) savedVolume = _volumeDefault;					_volume = savedVolume;				}				else				{					savedVolume = _volume;					_volume = 0;				}				_mute = aParam;								broadcastEvent( SoundEvents.MUTE_UPDATED );			}		}		public function get mute():Boolean		{			return _mute;		}				/**		 * Disposes of this Class.		 * 		 */		override public function dispose():void		{			_embedSound = null;			super.dispose();		}	}}